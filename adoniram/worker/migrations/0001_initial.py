# Generated by Django 3.0.5 on 2020-04-14 18:03

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('iduser', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=150)),
                ('last_name', models.CharField(max_length=150)),
                ('email', models.CharField(max_length=150)),
                ('passwords', models.CharField(max_length=150)),
                ('user_type', models.IntegerField(choices=[(1, 'Admin'), (2, 'Manager'), (3, 'Contractor')], default=3, verbose_name='User Type')),
                ('rate', models.DecimalField(decimal_places=2, max_digits=4)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'user',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id_user_mentor', models.IntegerField(primary_key=True, serialize=False)),
                ('id_user_contractor', models.IntegerField()),
            ],
            options={
                'db_table': 'group',
            },
        ),
        migrations.CreateModel(
            name='Work',
            fields=[
                ('idwork', models.AutoField(primary_key=True, serialize=False)),
                ('hours', models.DecimalField(decimal_places=2, max_digits=5)),
                ('work_type', models.CharField(max_length=45)),
                ('month', models.IntegerField(blank=True, default=0)),
                ('notes', models.CharField(blank=True, max_length=250)),
                ('logged_on', models.DateTimeField(auto_now_add=True)),
                ('iduser', models.ForeignKey(db_column='iduser', on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'work',
                'unique_together': {('idwork', 'iduser')},
            },
        ),
    ]
